#dfs 问题 这个结构比之前第38题要好，不用if True判断，之间return，遍历树一遍，不管有没有遇到最终符合条件的解都继续遍历

class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        self.res=[]
        def dfs(candidates,temp,remainder,index):
            if remainder==0:
                self.res.append(temp[:])
                return
            if remainder<0:
                return
            for i in range(index,len(candidates)):
                temp.append(candidates[i])
                dfs(candidates,temp,remainder-candidates[i],i)
                temp.pop()
                
        dfs(candidates,[],target,0)
        return self.res
