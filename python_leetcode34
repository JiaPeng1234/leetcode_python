#要求logn的复杂度那么首先想到的就是二分查找，在找到一个相等点后再分别找到左右边界的索引值返回
#找到target之后，以找到的位置为起点开始扩充左右边界

class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        if len(nums)==0 or target == None:
            return [-1,-1]
        l,r=0,len(nums)-1
        flag=False
        while l<=r:
            m=l+int((r-l)/2)
            if nums[m] == target:
                l=m
                r=m
                while l>0 and nums[l-1]==target:
                    l-=1
                while r<len(nums)-1 and nums[r+1]==target: 
                    r+=1
                flag=True
                break
            elif nums[m]>target:
                r=m-1
            else:
                l=m+1
        if flag:
            return [l,r]
        else:
            return [-1,-1]
